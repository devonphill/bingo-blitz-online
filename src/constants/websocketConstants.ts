/**
 * WebSocket Constants
 * This file contains standardized channel names, event types, and connection states.
 */

// Channel names should ideally be functions if they depend on sessionId,
// or constructed by SSTC. For now, defining base names.
export const CHANNEL_NAMES = {
  GAME_UPDATES_BASE: 'game-updates-for-session-', // Will be appended with sessionId
  CLAIM_UPDATES_BASE: 'claim-updates-for-session-', // Will be appended with sessionId
  // A global channel might be useful for non-session-specific broadcasts if any
  // For now, assuming all key events are session-specific.
} as const;

export const EVENT_TYPES = {
  // Caller -> Player events
  NUMBER_CALLED: 'number-called',             // Payload: { number: number, calledNumbers: number[], sessionId: string }
  GAME_STATE_UPDATE: 'game-state-update',     // Payload: { current_win_pattern: string, called_numbers: number[], game_status: string, etc. }
  GAME_RESET: 'game-reset',                   // Payload: { sessionId: string }
  WIN_PATTERN_UPDATED: 'win-pattern-updated', // Payload: { newPattern: string, sessionId: string }
  GAME_STATUS_UPDATED: 'game-status-updated', // Payload: { status: string, sessionId: string }
  CLAIM_VALIDATING_TKT: 'claim-validating-ticket', // Payload: Full Claim object (caller -> all players in session)
  CLAIM_RESOLUTION: 'claim-resolution',         // Payload: { claimId: string, validationStatus: 'VALID' | 'INVALID', playerId: string, ticket_serial?: string, pattern_claimed?: string, sessionId: string } (caller -> specific or all players)

  // Player -> Caller events
  CLAIM_SUBMITTED: 'claim-submitted',         // Payload: Full Claim object (player -> caller)

  // Other potential events
  PLAYER_PRESENCE_UPDATE: 'player-presence-update', // For player join/leave notifications
} as const;

export const CONNECTION_STATES = {
  CONNECTED: 'connected',
  CONNECTING: 'connecting',
  RECONNECTING: 'reconnecting',
  DISCONNECTED: 'disconnected',
  ERROR: 'error',
  UNKNOWN: 'unknown',
} as const;

export type WebSocketConnectionStatus = typeof CONNECTION_STATES[keyof typeof CONNECTION_STATES];

// Payload Types (examples, expand as needed)
export interface NumberCalledPayload {
  number: number;
  calledNumbers: number[];
  sessionId: string;
  timestamp: number;
}

export interface ClaimSubmittedPayload { // This is what the player sends
  sessionId: string;
  playerId: string; // UUID of the player
  playerName: string;
  playerCode: string;
  ticket_serial: string;
  ticket_details: Record<string, any>; // The full ticket object
  pattern_claimed: string;
  called_numbers_snapshot: number[];
  // id for the claim can be generated by SSTC or DB
}

export interface ClaimResolutionPayload {
  claimId: string;
  validationStatus: 'VALID' | 'INVALID';
  playerId: string;
  ticket_serial?: string;
  pattern_claimed?: string;
  sessionId: string;
  notes?: string;
  prize_amount?: number;
}

export interface ClaimValidatingTicketPayload extends ClaimSubmittedPayload { // Or a subset
  claimId: string; // The ID of the claim being validated
  // Any other fields players need to see while validation is in progress
}

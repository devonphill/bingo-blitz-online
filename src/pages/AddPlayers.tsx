import React, { useState, useEffect } from 'react';
import { useSessionContext } from '@/contexts/SessionProvider';
import BulkAddPlayersForm from '@/components/player/BulkAddPlayersForm';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useParams } from 'react-router-dom';
import { GameConfig } from '@/types';
import { gameConfigsToJson } from '@/utils/jsonUtils';

export default function AddPlayers() {
  const { sessionId } = useParams();
  const [nickname, setNickname] = useState('');
  const [email, setEmail] = useState('');
  const [tickets, setTickets] = useState(1);
  const [isAddingPlayer, setIsAddingPlayer] = useState(false);
  const [players, setPlayers] = useState<any[]>([]);
  const { 
    currentSession, 
    setCurrentSession, 
    updateSession,
    addPlayer,
    fetchPlayers,
    players: sessionPlayers
  } = useSessionContext();
  
  useEffect(() => {
    // Set current session
    if (sessionId) {
      setCurrentSession(sessionId);
    }
    
    // Fetch players for this session if context provides the method
    if (sessionId && fetchPlayers) {
      fetchPlayers(sessionId);
    }
  }, [sessionId, setCurrentSession, fetchPlayers]);
  
  // Update local players state when context players change
  useEffect(() => {
    if (sessionPlayers) {
      setPlayers(sessionPlayers);
    }
  }, [sessionPlayers]);

  const handleAddPlayer = async () => {
    if (!sessionId) return;
    if (!nickname.trim()) {
      alert('Please enter a nickname');
      return;
    }
    
    setIsAddingPlayer(true);
    
    try {
      if (addPlayer) {
        const playerId = await addPlayer(sessionId, {
          nickname,
          email,
          tickets,
          playerCode: '' // This will be generated by the addPlayer function
        });
        
        if (playerId) {
          // Clear form
          setNickname('');
          setEmail('');
          setTickets(1);
          
          // Refresh players if needed
          if (fetchPlayers) {
            fetchPlayers(sessionId);
          }
        }
      }
    } catch (error) {
      console.error('Error adding player:', error);
    } finally {
      setIsAddingPlayer(false);
    }
  };

  const handleUpdateSession = async () => {
    if (!sessionId || !currentSession) return;
    
    try {
      // Convert games_config to the correct format for the database using our utility function
      if (currentSession.games_config) {
        const jsonReadyConfig = gameConfigsToJson(currentSession.games_config);
        
        // Create a copy of the session with the properly formatted games_config
        const sessionUpdates = {
          ...currentSession,
          games_config: jsonReadyConfig
        };
        
        await updateSession(sessionId, sessionUpdates);
      }
    } catch (error) {
      console.error('Error updating session:', error);
    }
  };

  return (
    <div className="p-6">
      <Card>
        <CardHeader>
          <CardTitle>Add Players to Session</CardTitle>
          <CardDescription>
            Add individual players or bulk add players to the current bingo session.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Single player form */}
            <div>
              <h3 className="text-lg font-medium mb-4">Add Individual Player</h3>
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="nickname">Nickname</Label>
                  <Input
                    id="nickname"
                    value={nickname}
                    onChange={e => setNickname(e.target.value)}
                    placeholder="Player Nickname"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="email">Email (Optional)</Label>
                  <Input
                    id="email"
                    type="email"
                    value={email}
                    onChange={e => setEmail(e.target.value)}
                    placeholder="player@example.com"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="tickets">Number of Tickets</Label>
                  <Input
                    id="tickets"
                    type="number"
                    min={1}
                    value={tickets}
                    onChange={e => setTickets(parseInt(e.target.value) || 1)}
                  />
                </div>
                <Button
                  onClick={handleAddPlayer}
                  disabled={isAddingPlayer}
                  className="w-full"
                >
                  {isAddingPlayer ? "Adding..." : "Add Player"}
                </Button>
              </div>
            </div>
            
            {/* Bulk add form */}
            <div>
              {sessionId && <BulkAddPlayersForm sessionId={sessionId} />}
            </div>
          </div>
          
          {/* Players list */}
          <div className="mt-8">
            <h3 className="text-lg font-medium mb-4">Current Players ({players.length})</h3>
            <div className="overflow-auto max-h-80">
              <table className="w-full text-left">
                <thead>
                  <tr className="border-b">
                    <th className="py-2 px-4">Nickname</th>
                    <th className="py-2 px-4">Code</th>
                    <th className="py-2 px-4">Email</th>
                    <th className="py-2 px-4">Tickets</th>
                  </tr>
                </thead>
                <tbody>
                  {players.map(player => (
                    <tr key={player.id} className="border-b hover:bg-gray-50">
                      <td className="py-2 px-4">{player.nickname}</td>
                      <td className="py-2 px-4">{player.playerCode}</td>
                      <td className="py-2 px-4">{player.email || '-'}</td>
                      <td className="py-2 px-4">{player.tickets}</td>
                    </tr>
                  ))}
                  {players.length === 0 && (
                    <tr>
                      <td colSpan={4} className="py-4 text-center text-gray-500">
                        No players added yet
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
